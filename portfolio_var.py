# -*- coding: utf-8 -*-
"""Value_at_risk.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gXh62MwgNCutZJLycxyksKb3iDiH3yov
"""

import numpy as np
import pandas as pd
import yfinance as yf
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import norm

# Step 1: Fetch Historical Data
tickers = ['AAPL', 'MSFT', 'GOOGL'] # Portfolio of stocks
start_date = '2023-01-01'
end_date = '2024-01-01'

data = yf.download(tickers, start = start_date, end = end_date)['Close']
returns = np.log(data / data.shift(1)).dropna()

# Step 2: Define Portfolio weights
weights = np.array([0.4,0.3,0.3]) # Example portfolio allocation

# Step 3: Compute Portfolio returns
portfolio_returns = returns.dot(weights)

# Step 4: Compute Portfolio VaR (95% Confidence Level)
confidence_level = 0.95
mean_return = portfolio_returns.mean()
std_dev = portfolio_returns.std()

# Historical VaR
var_historical = np.percentile(portfolio_returns, (1 - confidence_level) * 100)

# Parametric VaR (Normal Distribution)
z_score = norm.ppf(1 - confidence_level)
var_parametric = mean_return + z_score * std_dev

# Monte Carlo Simulation
simulated_returns = np.random.normal(mean_return, std_dev, 10000)
var_monte_carlo = np.percentile(simulated_returns, (1 - confidence_level) * 100)

# Step 5: Print the results
print(f"Portfolio VaR (95% Confidence):")
print(f"Historical VaR: {var_historical:.4f}" )
print(f"Parametric VaR: {var_parametric:.4f}")
print(f"Monte Carlo VaR: {var_monte_carlo:.4f}")

""" **Extending Portfolio VaR: Conditional VaR (Expected Shortfall) & Stress Testing**


"""

# Step 6: Compute Conditional VaR (Expected Shortfall)
cvar_historical = portfolio_returns[portfolio_returns <= var_historical].mean()
cvar_parametric = mean_return - (std_dev * norm.pdf(z_score) / (1 - confidence_level))
cvar_monte_carlo = simulated_returns[simulated_returns <= var_monte_carlo].mean()

# Step 6: Stress Testing (Assuming a 5% Market Shock)
shock_factor = -0.05  # Simulating a 5% drop in all assets
stress_test_returns = portfolio_returns + shock_factor
stress_test_var = np.percentile(stress_test_returns, (1 - confidence_level) * 100)

# Step 7: Print the results
print(f"ðŸ“‰ Conditional VaR (Expected Shortfall):")
print(f" Historical CVaR: {cvar_historical:.4f}")
print(f" Parametric CVaR: {cvar_parametric:.4f}")
print(f" Monte Carlo CVaR: {cvar_monte_carlo:.4f}")
print(f"--------------------------------------")
print(f" Stress Test VaR (5% Market Drop): {stress_test_var:.4f}")

# Step 8: Visualize the results
plt.figure(figsize=(10, 5))
sns.histplot(portfolio_returns, bins=50, kde=True, color="blue", label="Returns Distribution")

#  Mark VaR (Red)
plt.axvline(var_historical, color="red", linestyle="--", label=f"VaR (95%): {var_historical:.4f}")

#  Mark CVaR (Orange)
plt.axvline(cvar_historical, color="orange", linestyle="--", label=f"CVaR (95%): {cvar_historical:.4f}")

plt.xlabel("Portfolio Daily Returns")
plt.ylabel("Frequency")
plt.title("Portfolio Return Distribution with VaR & CVaR")
plt.legend()
plt.show()

